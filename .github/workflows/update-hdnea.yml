name: Update Slivcdn Playlist

on:
  schedule:
    - cron: '0 */3 * * *' # Runs every 3 hours (e.g., 5:30 PM, 8:30 PM, 11:30 PM, 2:30 AM IST)
  workflow_dispatch: # Allows manual triggering

jobs:
  update-playlist:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Fetch hdnea cookie and update Slivcdn.json for all channels
      - name: Fetch hdnea Cookie and Update Slivcdn.json
        env:
          API_COOKIE: ${{ secrets.API_COOKIE }} # Optional: Add browser cookies if 403 occurs
        run: |
          python - <<EOF
          import requests
          import json
          import re
          import os
          from time import sleep

          # API URL
          api_url = "https://apiv4.sonyliv.com/AGL/4.7/R/ENG/MWEB/IN/BR/CONTENT/VIDEOURL/VOD/1090492435/freepreview"

          # Headers to mimic Chrome
          headers = {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',
              'Accept': 'application/json, text/plain, */*',
              'Accept-Language': 'en-US,en;q=0.9,hi;q=0.8',
              'Accept-Encoding': 'gzip, deflate, br',
              'Referer': 'https://www.sonyliv.com/',
              'Origin': 'https://www.sonyliv.com',
              'Connection': 'keep-alive',
              'Sec-Fetch-Dest': 'empty',
              'Sec-Fetch-Mode': 'cors',
              'Sec-Fetch-Site': 'cross-site',
              'DNT': '1',
              'Sec-Ch-Ua': '"Google Chrome";v="129", "Not=A?Brand";v="8", "Chromium";v="129"',
              'Sec-Ch-Ua-Mobile': '?0',
              'Sec-Ch-Ua-Platform': '"Windows"'
          }

          # Add browser cookies if provided
          api_cookie = os.getenv('API_COOKIE')
          if api_cookie:
              headers['Cookie'] = api_cookie
              print("Using provided cookies from API_COOKIE")

          # Fetch response with retries
          session = requests.Session()
          max_retries = 3
          for attempt in range(max_retries):
              try:
                  response = session.get(api_url, headers=headers, timeout=10)
                  response.raise_for_status()
                  break
              except requests.exceptions.RequestException as e:
                  print(f"Attempt {attempt + 1}/{max_retries} failed: {e}")
                  if attempt + 1 == max_retries:
                      print("Error: Failed to fetch API. Check API_COOKIE or server restrictions.")
                      raise SystemExit(1)
                  sleep(2)

          # Parse JSON response
          try:
              data = response.json()
          except json.JSONDecodeError:
              print("Error: Failed to parse JSON response from API")
              raise SystemExit(1)

          # Extract videoURL
          video_url = data.get('resultObj', {}).get('videoURL', '')
          if not video_url:
              print("Error: No videoURL found in the API response")
              raise SystemExit(1)

          # Extract hdnea cookie
          hdnea_match = re.search(r'hdnea=([^&]+)', video_url)
          if not hdnea_match:
              print("Error: No hdnea cookie found in videoURL")
              raise SystemExit(1)
          hdnea_cookie = hdnea_match.group(1)
          print(f"Fetched hdnea cookie: {hdnea_cookie}")

          # Load existing playlist (must be array of channels)
          playlist_file = 'Slivcdn.json'
          try:
              with open(playlist_file, 'r') as f:
                  playlist_data = json.load(f)
                  if isinstance(playlist_data, dict):
                      playlist = [playlist_data]
                      print("Converted single dictionary to array")
                  elif isinstance(playlist_data, list):
                      playlist = playlist_data
                  else:
                      raise ValueError("Invalid JSON structure: Must be array or single object")
              if not playlist:
                  raise ValueError("Playlist is empty")
          except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
              print(f"Error loading playlist: {e}. Skipping update.")
              raise SystemExit(1)

          # Update hdnea for each channel
          updated_count = 0
          for channel in playlist:
              current_link = channel.get('link', '')
              if not current_link:
                  print(f"Warning: No link found for channel '{channel.get('name', 'Unknown')}'. Skipping.")
                  continue

              # Extract base URL
              if '?' in current_link:
                  base_url = current_link.split('?')[0]
              else:
                  base_url = current_link

              # Always update hdnea to ensure file changes every run
              if 'hdnea=' in current_link:
                  new_link = re.sub(r'hdnea=[^&]+', f'hdnea={hdnea_cookie}', current_link)
              else:
                  new_link = f"{base_url}?hdnea={hdnea_cookie}"

              channel['link'] = new_link
              updated_count += 1
              print(f"Updated channel '{channel.get('name', 'Unknown')}' with new hdnea")

          # Write updated playlist (always write to ensure update)
          try:
              with open(playlist_file, 'w') as f:
                  json.dump(playlist, f, indent=2)
              print(f"Updated {updated_count} channels in Slivcdn.json with new hdnea cookie")
          except Exception as e:
              print(f"Error writing to Slivcdn.json: {e}")
              raise SystemExit(1)

          EOF

      # Commit and push changes
      - name: Commit Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add Slivcdn.json
          git commit -m "Update hdnea cookies for channels in Slivcdn.json" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
